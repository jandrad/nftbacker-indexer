/**
 * @wharfkit/wallet-plugin-privatekey v1.1.0
 * https://github.com/wharfkit/wallet-plugin-privatekey
 *
 * @license
 * Copyright (c) 2023 Greymass Inc. All Rights Reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1.  Redistribution of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 
 * 2.  Redistribution in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 * 
 * 3.  Neither the name of the copyright holder nor the names of its contributors
 *     may be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * YOU ACKNOWLEDGE THAT THIS SOFTWARE IS NOT DESIGNED, LICENSED OR INTENDED FOR USE
 * IN THE DESIGN, CONSTRUCTION, OPERATION OR MAINTENANCE OF ANY MILITARY FACILITY.
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var session = require('@wharfkit/session');

class WalletPluginPrivateKey extends session.AbstractWalletPlugin {
    constructor(privateKeyData) {
        super();
        this.id = 'wallet-plugin-privatekey';
        this.config = {
            requiresChainSelect: true,
            requiresPermissionSelect: true,
        };
        this.metadata = session.WalletPluginMetadata.from({
            name: 'Private Key Signer',
            description: '',
        });
        const privateKey = session.PrivateKey.from(privateKeyData);
        this.data.privateKey = privateKey;
        this.metadata.publicKey = String(privateKey.toPublic());
        this.metadata.description = `An unsecured wallet that can sign for authorities using the ${String(this.data.publicKey).substring(0, 11) +
            '...' +
            String(this.data.publicKey).substring(String(this.data.publicKey).length - 4, String(this.data.publicKey).length)} public key.`;
    }
    login(context) {
        let chain;
        if (context.chain) {
            chain = context.chain.id;
        }
        else {
            chain = context.chains[0].id;
        }
        return session.cancelable(new Promise((resolve, reject) => {
            if (!context.permissionLevel) {
                return reject('Calling login() without a permissionLevel is not supported by the WalletPluginPrivateKey plugin.');
            }
            resolve({
                chain,
                permissionLevel: context.permissionLevel,
            });
        }));
    }
    sign(resolved, context) {
        return session.cancelable(new Promise((resolve) => {
            const transaction = session.Transaction.from(resolved.transaction);
            const digest = transaction.signingDigest(session.Checksum256.from(context.chain.id));
            const privateKey = session.PrivateKey.from(this.data.privateKey);
            const signature = privateKey.signDigest(digest);
            resolve({
                signatures: [signature],
            });
        }));
    }
}

exports.WalletPluginPrivateKey = WalletPluginPrivateKey;
//# sourceMappingURL=wallet-plugin-privatekey.js.map
